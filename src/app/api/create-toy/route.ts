import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import fs from 'fs'
import path from 'path'

export async function POST(request: NextRequest) {
  try {
    // Get toy data from request body
    const toyData = await request.json()
    
    console.log('Received toy data:', JSON.stringify(toyData, null, 2))
    
    // Validate required fields
    if (!toyData.name || !toyData.category || !toyData.price) {
      return NextResponse.json({ 
        success: false, 
        message: 'Missing required fields: name, category, price'
      }, { status: 400 })
    }

    // Create a properly formatted toy object for database insertion
    const newToy = {
      name: toyData.name,
      description: toyData.description,
      category: toyData.category,
      brand: toyData.brand || 'PlayPro',
      price: toyData.price,
      age_group: toyData.age_group,
      image_url: toyData.image_url || '',
      stock: toyData.stock || 50,
      is_active: true
      // Note: id, created_at, updated_at are auto-generated by the database
      // Note: tags, images, weight, dimensions, safety_rating will use their default values
    }
    
    console.log('Created toy object:', JSON.stringify(newToy, null, 2))
    
    // Try to insert into database first
    try {
      // Insert the toy object directly (all fields exist in database schema)
      const dbToy = newToy
      
      console.log('Attempting database insertion with:', JSON.stringify(dbToy, null, 2))
      
      const { data: insertedToy, error: dbError } = await supabase
        .from('toys')
        .insert([dbToy])
        .select()
        .single()
      
      if (!dbError && insertedToy) {
        console.log('Toy successfully inserted into database:', insertedToy)
        return NextResponse.json({ 
          success: true, 
          message: 'Toy created and saved to database!',
          toy: insertedToy,
          data: insertedToy
        })
      } else {
        console.log('Database insertion failed:', dbError)
        // Continue to fallback approach
      }
    } catch (dbError) {
      console.log('Database connection failed:', dbError)
      // Continue to fallback approach
    }
    
    // Fallback: Store in JSON file for persistence
    try {
      const toysFilePath = path.join(process.cwd(), 'data', 'toys.json')
      
      // Read existing toys
      let existingToys = []
      if (fs.existsSync(toysFilePath)) {
        try {
          const fileContent = fs.readFileSync(toysFilePath, 'utf-8')
          const parsedData = JSON.parse(fileContent)
          // Ensure it's an array
          existingToys = Array.isArray(parsedData) ? parsedData : []
        } catch (parseError) {
          console.log('Failed to parse existing JSON, starting with empty array:', parseError)
          existingToys = []
        }
      }
      
      // Convert our toy to the JSON format
      const jsonToy = {
        id: (newToy as any).id,
        name: newToy.name,
        description: newToy.description,
        category: newToy.category,
        brand: newToy.brand,
        price: newToy.price,
        ageGroup: newToy.age_group, // Convert to camelCase for JSON
        imageUrl: newToy.image_url, // Convert to camelCase for JSON
        stock: newToy.stock,
        tags: (newToy as any).tags || []
      }
      
      // Add new toy to the list
      existingToys.push(jsonToy)
      
      // Write back to file
      fs.writeFileSync(toysFilePath, JSON.stringify(existingToys, null, 2))
      
      console.log('Toy saved to JSON file as fallback')
      
      return NextResponse.json({ 
        success: true, 
        message: 'Toy created and saved successfully!',
        toy: newToy,
        data: newToy,
        note: 'Saved to local storage. Will sync to database when available.'
      })
      
    } catch (fileError) {
      console.error('Failed to save to JSON file:', fileError)
      
      // Final fallback - just return the toy (in-memory only)
      return NextResponse.json({ 
        success: true, 
        message: 'Toy created successfully (temporary)!',
        toy: newToy,
        data: newToy,
        note: 'Toy created in memory only. Please refresh to see persistent toys.'
      })
    }
    
  } catch (error) {
    console.error('API error:', error)
    
    return NextResponse.json({ 
      success: false, 
      message: 'Failed to create toy', 
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}